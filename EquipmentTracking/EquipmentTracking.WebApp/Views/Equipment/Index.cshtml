@model IEnumerable<EquipmentTracking.WebApp.Models.Equipment>
@using EquipmentTracking.WebApp.Models
@{
    ViewBag.Title = "Equipment";
}

<h2>Equipment</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>

<form action="~/equipment/index" method="get">
    <input type="text" class="input-sm" name="queryByName" value="@ViewBag.Query" placeholder="Filter by name" />
    <input type="submit" class="btn btn-warning" value="Filter" />
</form>

<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Name)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Description)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Category)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.AssignedTo)
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.Name)
        </td>
        <td>
            @Shorten(item.Description, 20)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Category)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.AssignedTo.Name)
        </td>
        <td>
            @Html.ActionLink("Edit", "Edit", new { id=item.ID }) |
            @Html.ActionLink("Details", "Details", new { id=item.ID }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.ID })
        </td>
    </tr>
}

</table>
<form action="~/equipment/index" method="post">
    <span>Asignees:</span>
    @foreach (var employee in ViewBag.Assignees as IEnumerable<Employee>)
    {
        <a class="btn btn-default" href="~/equipment/index?employeeID=@employee.ID">@employee.Name</a>
    }
    
</form>

@functions {
    /// <summary>
    /// Shortens text longer than value of limitLength characters.
    /// If text is longer than 'limitLength' characters, adds '...' at the end, if not, leaves it as is.
    /// </summary>
    /// <param name="text"></param>
    /// <param name="limitLength"></param>
    /// <returns></returns>
    public string Shorten(string text, int limitLength)
    {
        return text.Length > limitLength ?
                text.Substring(0, limitLength) + "..." :
                    text;
    }
}